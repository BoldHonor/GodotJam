[gd_resource type="VisualShader" load_steps=4 format=2]

[sub_resource type="VisualShaderNodeTexture" id=1]
source = 2

[sub_resource type="VisualShaderNodeVectorOp" id=2]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.3, 0.3, 0.3 ) ]

[sub_resource type="VisualShaderNodeVec3Uniform" id=3]
uniform_name = "VectorUniform"

[resource]
code = "shader_type canvas_item;
uniform vec3 VectorUniform;



void vertex() {
// Output:0

}

void fragment() {
// Texture:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out2p0 = _tex_read.rgb;
		n_out2p1 = _tex_read.a;
	}

// VectorUniform:4
	vec3 n_out4p0 = VectorUniform;

// VectorOp:3
	vec3 n_out3p0 = n_out2p0 + n_out4p0;

// Output:0
	COLOR.rgb = n_out3p0;
	COLOR.a = n_out2p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -220.9, -133 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 540, 40 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -240, 140 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 0, 0 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -160, 340 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 0, 0, 4, 0, 3, 1, 2, 1, 0, 1, 2, 0, 3, 0, 3, 0, 0, 0, 4, 0, 3, 1, 2, 1, 0, 1 )
